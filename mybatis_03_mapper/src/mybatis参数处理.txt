单个参数:mybatis不会做特殊处理
    #{参数名}:取出参数值

多个参数:mybatis会做特殊处理
    多个参数会被封装成一个map,
        key,param1, ...paramN, 或者参数索引
        value: 传入参数值
    #{}就是从map中获取指定的key

    异常:
    org.apache.ibatis.binding.BindingException:
    Parameter 'id' not found.
    Available parameters are [1,0,param1, param2]
    操作:
        方法: public Employee getEmpByIdAndLastName(Integer id,String lastName)
        取指: #{id}, #{lastName} ==> #{param1}, #{param2}

命名参数: 明确指定封装参数时map的key; @Param("id")
        多个参数会被封装成一个map
            key: 使用@Param注解指定的值
            value: 参数值
        #{指定的key} 取出对应的参数值

POJO:
如果多个参数正好是业务逻辑的数据模型,我们就可以直接传入pojo;
    #{属性名}: 取出传入的pojo的属性值

Map:
如果多个参数不是业务模型中的数据,没有对应的pojo,为了方便,我们可以传入map
    #{key}：取出map中对应的值

TO:
如果多个参数不是业务模型中的数据,但是经常要使用,推荐来编写一个TO(Transfer Object) 数据传输对象
Page{
    int index;
    int size;
}

=============================思考=========================================
public Employee getEmp(@Param("id") Integer id, String lastName)
    取值: id==>#{id/param1}   lastName==>#{param2}

public Employee getEmp(Integer id, @Param("e") Employee emp)
    取值: id==>#{param1}      lastName==>#{param2.lastName/e.lastName}

##特别注意:如果Collection(List、Set)类型或者是数组
          也会特殊处理. 也是把传入的list或者数组封装在map中.
            key:Collection(collection), 如果List还可以使用这个key(list)
                数组(array)
public Employee getEmpById(List<Integer> ids)
    取值: 取出第一个id值: #{list[0]}

===================结合源码,看mybatis怎么处理参数============================
总结: 参数多时会封装map,为了不混乱,我们可以使用@Param来指定封装时使用的key;
#{key}就可以取出map中的值;

(@Param("id") Integer id, @Param("lastName") String lastName)
ParamNameResolver解析参数封装map的;
//1. names: {0=id, 1=lastName}; 构造器的时候就确定了
    确定流程:
    1) 获取每个标了param注解的参数的@Param的值: id, lastName; 赋值给name;
    2) 每次解析一个参数给map中保存信息: (key:参数索引, value:name的值)
        name的值:
            标注了param注解:注解的值
            没有标注:
                1. 全局配置: useActualParamName(jdk1.8): name=参数名
                2. name=map.size(): 相当于当前元素的索引
    {0=id, 1=lastName, 2=2}

    public Object getNamedParams(Object[] args) {
        int paramCount = this.names.size();
        //1. 参数作为null直接返回
        if(args != null && paramCount != 0) {
            //2. 如果只有一个元素, 并且没有Param注解,args[0],单个参数直接返回
            if(!this.hasParamAnnotation && paramCount == 1) {
                return args[((Integer)this.names.firstKey()).intValue()];
            //3. 多个元素/有Param标注
            } else {
                Map<String, Object> param = new ParamMap();
                int i = 0;

                //4. 遍历names集合:{0=id, 1=lastName, 2=2}
                for(Iterator var5 = this.names.entrySet().iterator(); var5.hasNext(); ++i) {
                    Entry<Integer, String> entry = (Entry)var5.next();
                    //names集合的value作为key; names集合的key有作为取值的参考args[0]:args[1,"tom"]
                    //eg: {id:args[0]:1, lastName=args[1]:Tom, 2=args[2]}
                    param.put(entry.getValue(), args[((Integer)entry.getKey()).intValue()]);

                    //额外的将每一个参数保存到map中,使用新的key, param1...paramN
                    //效果: 有Param注解可#{指定的key}, 或者#{param1}
                    String genericParamName = "param" + String.valueOf(i + 1);
                    if(!this.names.containsValue(genericParamName)) {
                        param.put(genericParamName, args[((Integer)entry.getKey()).intValue()]);
                    }
                }

                return param;
            }
        } else {
            return null;
        }
    }

========================参数值的获取======================================
#{}: 可以获取map中的值或者pojo对象属性的值
${}: 可以获取map中的值或者pojo对象属性的值

select * from tb1_employee where id=${id} and last_name=#{lastName}
Preparing: select * from tb1_employee where id=2 and last_name=?
    区别:
        #{}: 是以预编译的形式,将参数设置到sql语句中;PreparedStatement;放置sql注入
        ${}: 取出的值直接拼装在sql语句中;会有安全问题
        大多情况下,我们取参数的值都应该取使用#{};

        原生jdbc不支持占位符的地方,我们就可以使用${}进行取值
        比如分表、排序...; 按照年份分表拆分
            select * from ${year}_salary where xxx;
            select * from tb1_employee order by ${f_name} ${order}

#{}: 更丰富的用法:
    规定参数的一些规则:
    javaType, jdbcType, mdoe(存储过程), numericScale,
    resultMap, typeHandler, jdbcTypeName, expression(未来准备支持的功能)

    jdbcType通常需要在某种特定的条件下被设置:
        在我们数据为null的时候,有些数据库可能不能识别mybatis对null的默认处理.比如oracle(报错);

        JdbcType OTHER: 无效的类型;因为mybatis对所有的null都映射的是Jdbc OTHER类型, oracle不能正确处理;
        由于全局配置中: jdbcTypeForNull=OTHER, oracle不支持;两种方法解决
        1. #{email, jdbcType=OTHER};
        2. jdbcTypeForNull=NULL
             <setting name="jdbcTypeForNull" value="NULL"/>






