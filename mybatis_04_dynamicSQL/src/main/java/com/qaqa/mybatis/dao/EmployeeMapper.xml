<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qaqa.mybatis.dao.EmployeeMapper">

    <!--
    namespace: 命名空间;指定为接口全类名EmployeeMapper
    id: 唯一标示
    resultType: 返回值类型
    #{id}: 从传递过来的参数中取出id值
        public Employee getEmpById(Integer id);
    -->

    <select id="getEmpByLastNameLikeReturnMap" resultType="com.qaqa.mybatis.bean.Employee">
        SELECT * FROM tb1_employee where last_name LIKE #{lastName}
    </select>

    <select id="getEmpByIdReturnMap" resultType="map">
        SELECT * FROM tb1_employee where id=#{id}
    </select>

    <!--resultType: 如果返回的是一个集合,要写集合中元素的类型-->
    <select id="getEmpsByLastNameLike" resultType="com.qaqa.mybatis.bean.Employee">
        SELECT * FROM  tb1_employee where last_name LIKE #{lastName}
    </select>

    <!---->
    <select id="getEmpByMap" resultType="com.qaqa.mybatis.bean.Employee">
        select * from ${tableName} where id = ${id} AND username=#{lastName}
    </select>
    <!--public Employee getEmpByIdAndLastName(Integer id, String lastName);-->
    <select id="getEmpByIdAndLastName" resultType="com.qaqa.mybatis.bean.Employee">
        select * from USERS where id = #{id} AND username=#{lastName}
    </select>

    <select id="getEmpById" resultType="com.qaqa.mybatis.bean.Employee">
        select * from tb1_employee where id = #{id}
    </select>
    <select id="getEmpById" resultType="com.qaqa.mybatis.bean.Employee" databaseId="mysql">
        select * from tb1_employee where id = #{id}
    </select>
    <select id="getEmpById" resultType="com.qaqa.mybatis.bean.Employee" databaseId="oracle">
        select id, username lastName, email, grade gender from USERS WHERE ID=#{id}
    </select>

    <!--
    public void addEmp(Employee employee);
        parameterType: 可以省略,
            获取自增主键的值:
        mysql支持自增主键, 自增主键值的获取,mybatis也是利用statement.getGeneratedKeys()
        useGeneratedKeys="true"; 使用自增主键获取主键值策略
        keyProperty: 指定对应的主键属性,也就是mybatis获取到主键值以后,将这个值封装给javaBean的哪个属性
    -->
    <insert id="addEmp" parameterType="com.qaqa.mybatis.bean.Employee"
        useGeneratedKeys="true" keyProperty="id" databaseId="mysql">
        INSERT INTO tb1_employee(last_name, email, gender)
        VALUES (#{lastName}, #{email}, #{gender})
    </insert>

    <!--
        Oracle不支持自增: Oracle使用序列来模拟自增;
        每次插入的数据的主键是从序列中拿到的值; 如何获取到这个值?
            select xxx.nextval from dual;
         keyproperty: 查出主键的值封装给javaBean的哪个属性
         order="BEFORE": 当前sql在插入sql之前运行
               "After": 当前sql在插入sql之后运行
         resultType: 查出的数据的返回值类型

         Before运行顺序:
            先运行selectKey查询id的sql;查出id值分装给javaBean的id属性
            在运行插入的sql,就可以取出id属性对应的值
         After运行顺序:(若多条update同时执行,易出现问题,所以一般用before)
            先运行插入的sql(从序列中取出新值作为id)
            在运行
    -->
    <!--
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
                  //编写查询主键的sql的语句
            SELECT USERS_SEQ.nextval FROM dual
        </selectKey>
                INSERT INTO USERS (ID, USERNAME, EMAIL)
                VALUES (#{id},#{lastName},#{email})

        <selectKey keyProperty="id" order="AFTER" resultType="Integer">
            SELECT USERS_SEQ.currval from dual
       </selectKey>
          INSERT INTO USERS (ID, USERNAME, EMAIL)
          VALUES (USERS_SEQ.nextval, #{lastName}, #{email})

          , jdbcType=NULL
        -->
    <insert id="addEmp" databaseId="oracle">
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
--             编写查询主键的sql的语句
            SELECT USERS_SEQ.nextval FROM dual
        </selectKey>
        INSERT INTO USERS (ID, USERNAME, EMAIL)
        VALUES (#{id},#{lastName},#{email})
    </insert>

    <!--public void updateEmp(Employee employee); -->
    <update id="updateEmp">
        UPDATE tb1_employee
        SET last_name=#{lastName}, email=#{email}, gender=#{gender}
        WHERE id=#{id}
    </update>

    <!--
    public void deleteEmpById(Integer id);
    -->
    <delete id="deleteEmpById">
        DELETE FROM tb1_employee
        WHERE id=#{id}
    </delete>



</mapper>